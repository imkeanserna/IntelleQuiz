// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

// model Participant {
//    id        String   @id @default(uuid())
//    username  String   @unique
//    password  String
//    createdAt DateTime @default(now())
//    updatedAt DateTime @updatedAt
//    image     Int
//
//    points Points[]
//    rooms  Room[]
// }

model Admin {
   id        String   @id @default(uuid())
   username  String   @unique
   password  String
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   image     Int

   points       Points[]
   joinedRooms  Room[]   @relation("UserRooms")
   createdRooms Room[]   @relation("CreatedRooms")
}

model Room {
   id        String   @id
   name      String
   status    Status   @default(WAITING)
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   participants Admin[] @relation("UserRooms")
   quizes       Quiz[]
   // participants Participant[]
   adminId      String
   admin        Admin   @relation("CreatedRooms", fields: [adminId], references: [id], onDelete: Cascade)
}

model Quiz {
   id             String    @id @default(uuid())
   problems       Problem[]
   currentProblem Int       @default(0)

   room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
   roomId String

   points Points[]
}

model Points {
   id     String @id @default(uuid())
   points Int    @default(0)

   participant   Admin  @relation(fields: [participantId], references: [id], onDelete: Cascade)
   participantId String
   // admin   Admin  @relation(fields: [adminId], references: [id], onDelete: Cascade)
   // adminId String

   quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
   quizId String
}

model Problem {
   id        String    @id @default(uuid())
   title     String    @db.Text
   options   Option[]
   answer    Int
   countdown Int       @default(10) //countdown default by 10 sec
   startTime DateTime?
   createdAt DateTime  @default(now())

   quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
   quizId String
}

model Option {
   id     String @id @default(uuid())
   choice String @db.Text

   problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
   problemId String
}

enum Status {
   WAITING
   STARTED
   ONGOING
   FINISHED
}
